{"ast":null,"code":"// src/api/openLibrary.js\nconst BASE_URL = 'https://openlibrary.org/search.json';\n\n/**\n * Search OpenLibrary API\n * @param {Object} params\n * @param {string} params.q - Search query (book title or keyword)\n * @param {string} [params.author] - Optional author filter\n * @param {string} [params.year] - Optional publication year\n * @param {string} [params.language] - Optional language code\n * @param {number} [params.page=1] - Page number\n * @param {number} [params.limit=12] - Results per page\n */\nexport async function searchBooks({\n  q,\n  author = '',\n  year = '',\n  language = '',\n  page = 1,\n  limit = 12\n}) {\n  if (!q || !q.trim()) {\n    return {\n      docs: [],\n      numFound: 0\n    };\n  }\n  const searchParams = new URLSearchParams();\n  searchParams.set('q', q.trim());\n  if (author) searchParams.set('author', author.trim());\n  if (year) searchParams.set('first_publish_year', year.trim());\n  if (language) searchParams.set('language', language.toLowerCase());\n  searchParams.set('page', page.toString());\n  searchParams.set('limit', limit.toString());\n  const url = `${BASE_URL}?${searchParams.toString()}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      console.error('OpenLibrary API error', response.status);\n      return {\n        docs: [],\n        numFound: 0\n      };\n    }\n    const data = await response.json();\n\n    // üß© Defensive checks to avoid undefined values\n    const docs = Array.isArray(data.docs) ? data.docs : [];\n    const numFound = typeof data.numFound === 'number' ? data.numFound : data.num_found || docs.length;\n    return {\n      docs,\n      numFound\n    };\n  } catch (error) {\n    console.error('‚ùå Fetch failed', error);\n    return {\n      docs: [],\n      numFound: 0\n    };\n  }\n}","map":{"version":3,"names":["BASE_URL","searchBooks","q","author","year","language","page","limit","trim","docs","numFound","searchParams","URLSearchParams","set","toLowerCase","toString","url","response","fetch","ok","console","error","status","data","json","Array","isArray","num_found","length"],"sources":["C:/Users/admin/Desktop/Book_Finder/book-finder-final/book-finder/src/api/openLibrary.js"],"sourcesContent":["// src/api/openLibrary.js\nconst BASE_URL = 'https://openlibrary.org/search.json';\n\n/**\n * Search OpenLibrary API\n * @param {Object} params\n * @param {string} params.q - Search query (book title or keyword)\n * @param {string} [params.author] - Optional author filter\n * @param {string} [params.year] - Optional publication year\n * @param {string} [params.language] - Optional language code\n * @param {number} [params.page=1] - Page number\n * @param {number} [params.limit=12] - Results per page\n */\nexport async function searchBooks({\n  q,\n  author = '',\n  year = '',\n  language = '',\n  page = 1,\n  limit = 12,\n}) {\n  if (!q || !q.trim()) {\n    return { docs: [], numFound: 0 };\n  }\n\n  const searchParams = new URLSearchParams();\n  searchParams.set('q', q.trim());\n  if (author) searchParams.set('author', author.trim());\n  if (year) searchParams.set('first_publish_year', year.trim());\n  if (language) searchParams.set('language', language.toLowerCase());\n  searchParams.set('page', page.toString());\n  searchParams.set('limit', limit.toString());\n\n  const url = `${BASE_URL}?${searchParams.toString()}`;\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      console.error('OpenLibrary API error', response.status);\n      return { docs: [], numFound: 0 };\n    }\n\n    const data = await response.json();\n\n    // üß© Defensive checks to avoid undefined values\n    const docs = Array.isArray(data.docs) ? data.docs : [];\n    const numFound =\n      typeof data.numFound === 'number'\n        ? data.numFound\n        : data.num_found || docs.length;\n\n    return { docs, numFound };\n  } catch (error) {\n    console.error('‚ùå Fetch failed', error);\n    return { docs: [], numFound: 0 };\n  }\n}\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,qCAAqC;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,WAAWA,CAAC;EAChCC,CAAC;EACDC,MAAM,GAAG,EAAE;EACXC,IAAI,GAAG,EAAE;EACTC,QAAQ,GAAG,EAAE;EACbC,IAAI,GAAG,CAAC;EACRC,KAAK,GAAG;AACV,CAAC,EAAE;EACD,IAAI,CAACL,CAAC,IAAI,CAACA,CAAC,CAACM,IAAI,CAAC,CAAC,EAAE;IACnB,OAAO;MAAEC,IAAI,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAE,CAAC;EAClC;EAEA,MAAMC,YAAY,GAAG,IAAIC,eAAe,CAAC,CAAC;EAC1CD,YAAY,CAACE,GAAG,CAAC,GAAG,EAAEX,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;EAC/B,IAAIL,MAAM,EAAEQ,YAAY,CAACE,GAAG,CAAC,QAAQ,EAAEV,MAAM,CAACK,IAAI,CAAC,CAAC,CAAC;EACrD,IAAIJ,IAAI,EAAEO,YAAY,CAACE,GAAG,CAAC,oBAAoB,EAAET,IAAI,CAACI,IAAI,CAAC,CAAC,CAAC;EAC7D,IAAIH,QAAQ,EAAEM,YAAY,CAACE,GAAG,CAAC,UAAU,EAAER,QAAQ,CAACS,WAAW,CAAC,CAAC,CAAC;EAClEH,YAAY,CAACE,GAAG,CAAC,MAAM,EAAEP,IAAI,CAACS,QAAQ,CAAC,CAAC,CAAC;EACzCJ,YAAY,CAACE,GAAG,CAAC,OAAO,EAAEN,KAAK,CAACQ,QAAQ,CAAC,CAAC,CAAC;EAE3C,MAAMC,GAAG,GAAG,GAAGhB,QAAQ,IAAIW,YAAY,CAACI,QAAQ,CAAC,CAAC,EAAE;EAEpD,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChBC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEJ,QAAQ,CAACK,MAAM,CAAC;MACvD,OAAO;QAAEb,IAAI,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAE,CAAC;IAClC;IAEA,MAAMa,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;;IAElC;IACA,MAAMf,IAAI,GAAGgB,KAAK,CAACC,OAAO,CAACH,IAAI,CAACd,IAAI,CAAC,GAAGc,IAAI,CAACd,IAAI,GAAG,EAAE;IACtD,MAAMC,QAAQ,GACZ,OAAOa,IAAI,CAACb,QAAQ,KAAK,QAAQ,GAC7Ba,IAAI,CAACb,QAAQ,GACba,IAAI,CAACI,SAAS,IAAIlB,IAAI,CAACmB,MAAM;IAEnC,OAAO;MAAEnB,IAAI;MAAEC;IAAS,CAAC;EAC3B,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,OAAO;MAAEZ,IAAI,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAE,CAAC;EAClC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}