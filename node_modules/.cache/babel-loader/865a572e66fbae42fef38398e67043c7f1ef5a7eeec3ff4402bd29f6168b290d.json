{"ast":null,"code":"// src/api/openLibrary.js\nconst BASE = 'https://openlibrary.org';\n\n/**\n * Search books using the Open Library API with pagination and filters.\n * Stable against intermittent empty \"docs\" on later pages.\n */\nexport async function searchBooks({\n  q,\n  author,\n  year,\n  language,\n  page = 1,\n  limit = 12\n}) {\n  if (!q || !q.trim()) return {\n    docs: [],\n    numFound: 0\n  };\n  const params = new URLSearchParams();\n\n  // Use full-text search instead of title-only for more stable paging\n  params.set('q', q.trim());\n  if (author) params.set('author', author.trim());\n  if (year) params.set('first_publish_year', year.trim());\n  if (language) params.set('language', language.toLowerCase());\n  params.set('page', page);\n  params.set('limit', limit);\n  const url = `${BASE}/search.json?${params.toString()}`;\n  try {\n    const res = await fetch(url);\n    if (!res.ok) throw new Error(`API error: ${res.status}`);\n    const data = await res.json();\n\n    // --- ðŸ©¹ Some pages return empty docs though numFound>0; retry once ---\n    if ((!data.docs || data.docs.length === 0) && data.numFound > 0) {\n      console.warn('Empty docs on page', page, 'â€” retrying once...');\n      const retry = await fetch(url);\n      const retryData = await retry.json();\n      return retryData;\n    }\n    return data;\n  } catch (err) {\n    console.error('Error fetching data from OpenLibrary:', err);\n    return {\n      docs: [],\n      numFound: 0,\n      error: err.message\n    };\n  }\n}\n\n// âœ… Cover image helper\nexport function coverUrl(id, size = 'M') {\n  if (!id) return null;\n  return `https://covers.openlibrary.org/b/id/${id}-${size}.jpg`;\n}\n\n// âœ… Book page link helper\nexport function openLibraryUrl(key) {\n  if (!key) return BASE;\n  return `${BASE}${key}`;\n}","map":{"version":3,"names":["BASE","searchBooks","q","author","year","language","page","limit","trim","docs","numFound","params","URLSearchParams","set","toLowerCase","url","toString","res","fetch","ok","Error","status","data","json","length","console","warn","retry","retryData","err","error","message","coverUrl","id","size","openLibraryUrl","key"],"sources":["C:/Users/admin/Desktop/Book_Finder/book-finder-final/book-finder/src/api/openLibrary.js"],"sourcesContent":["// src/api/openLibrary.js\nconst BASE = 'https://openlibrary.org';\n\n/**\n * Search books using the Open Library API with pagination and filters.\n * Stable against intermittent empty \"docs\" on later pages.\n */\nexport async function searchBooks({\n  q,\n  author,\n  year,\n  language,\n  page = 1,\n  limit = 12,\n}) {\n  if (!q || !q.trim()) return { docs: [], numFound: 0 };\n\n  const params = new URLSearchParams();\n\n  // Use full-text search instead of title-only for more stable paging\n  params.set('q', q.trim());\n  if (author) params.set('author', author.trim());\n  if (year) params.set('first_publish_year', year.trim());\n  if (language) params.set('language', language.toLowerCase());\n\n  params.set('page', page);\n  params.set('limit', limit);\n\n  const url = `${BASE}/search.json?${params.toString()}`;\n\n  try {\n    const res = await fetch(url);\n    if (!res.ok) throw new Error(`API error: ${res.status}`);\n    const data = await res.json();\n\n    // --- ðŸ©¹ Some pages return empty docs though numFound>0; retry once ---\n    if ((!data.docs || data.docs.length === 0) && data.numFound > 0) {\n      console.warn('Empty docs on page', page, 'â€” retrying once...');\n      const retry = await fetch(url);\n      const retryData = await retry.json();\n      return retryData;\n    }\n\n    return data;\n  } catch (err) {\n    console.error('Error fetching data from OpenLibrary:', err);\n    return { docs: [], numFound: 0, error: err.message };\n  }\n}\n\n// âœ… Cover image helper\nexport function coverUrl(id, size = 'M') {\n  if (!id) return null;\n  return `https://covers.openlibrary.org/b/id/${id}-${size}.jpg`;\n}\n\n// âœ… Book page link helper\nexport function openLibraryUrl(key) {\n  if (!key) return BASE;\n  return `${BASE}${key}`;\n}\n"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAG,yBAAyB;;AAEtC;AACA;AACA;AACA;AACA,OAAO,eAAeC,WAAWA,CAAC;EAChCC,CAAC;EACDC,MAAM;EACNC,IAAI;EACJC,QAAQ;EACRC,IAAI,GAAG,CAAC;EACRC,KAAK,GAAG;AACV,CAAC,EAAE;EACD,IAAI,CAACL,CAAC,IAAI,CAACA,CAAC,CAACM,IAAI,CAAC,CAAC,EAAE,OAAO;IAAEC,IAAI,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAE,CAAC;EAErD,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;;EAEpC;EACAD,MAAM,CAACE,GAAG,CAAC,GAAG,EAAEX,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;EACzB,IAAIL,MAAM,EAAEQ,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAEV,MAAM,CAACK,IAAI,CAAC,CAAC,CAAC;EAC/C,IAAIJ,IAAI,EAAEO,MAAM,CAACE,GAAG,CAAC,oBAAoB,EAAET,IAAI,CAACI,IAAI,CAAC,CAAC,CAAC;EACvD,IAAIH,QAAQ,EAAEM,MAAM,CAACE,GAAG,CAAC,UAAU,EAAER,QAAQ,CAACS,WAAW,CAAC,CAAC,CAAC;EAE5DH,MAAM,CAACE,GAAG,CAAC,MAAM,EAAEP,IAAI,CAAC;EACxBK,MAAM,CAACE,GAAG,CAAC,OAAO,EAAEN,KAAK,CAAC;EAE1B,MAAMQ,GAAG,GAAG,GAAGf,IAAI,gBAAgBW,MAAM,CAACK,QAAQ,CAAC,CAAC,EAAE;EAEtD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;IAC5B,IAAI,CAACE,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAcH,GAAG,CAACI,MAAM,EAAE,CAAC;IACxD,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;;IAE7B;IACA,IAAI,CAAC,CAACD,IAAI,CAACb,IAAI,IAAIa,IAAI,CAACb,IAAI,CAACe,MAAM,KAAK,CAAC,KAAKF,IAAI,CAACZ,QAAQ,GAAG,CAAC,EAAE;MAC/De,OAAO,CAACC,IAAI,CAAC,oBAAoB,EAAEpB,IAAI,EAAE,oBAAoB,CAAC;MAC9D,MAAMqB,KAAK,GAAG,MAAMT,KAAK,CAACH,GAAG,CAAC;MAC9B,MAAMa,SAAS,GAAG,MAAMD,KAAK,CAACJ,IAAI,CAAC,CAAC;MACpC,OAAOK,SAAS;IAClB;IAEA,OAAON,IAAI;EACb,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZJ,OAAO,CAACK,KAAK,CAAC,uCAAuC,EAAED,GAAG,CAAC;IAC3D,OAAO;MAAEpB,IAAI,EAAE,EAAE;MAAEC,QAAQ,EAAE,CAAC;MAAEoB,KAAK,EAAED,GAAG,CAACE;IAAQ,CAAC;EACtD;AACF;;AAEA;AACA,OAAO,SAASC,QAAQA,CAACC,EAAE,EAAEC,IAAI,GAAG,GAAG,EAAE;EACvC,IAAI,CAACD,EAAE,EAAE,OAAO,IAAI;EACpB,OAAO,uCAAuCA,EAAE,IAAIC,IAAI,MAAM;AAChE;;AAEA;AACA,OAAO,SAASC,cAAcA,CAACC,GAAG,EAAE;EAClC,IAAI,CAACA,GAAG,EAAE,OAAOpC,IAAI;EACrB,OAAO,GAAGA,IAAI,GAAGoC,GAAG,EAAE;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}