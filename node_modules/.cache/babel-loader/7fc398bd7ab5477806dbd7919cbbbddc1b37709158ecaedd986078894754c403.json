{"ast":null,"code":"const BASE = 'https://openlibrary.org';\nexport async function searchBooks({\n  q,\n  author,\n  year,\n  language,\n  page = 1,\n  limit = 12\n}) {\n  // Prevent empty search\n  if (!q || !q.trim()) return {\n    docs: [],\n    numFound: 0\n  };\n  const params = new URLSearchParams();\n\n  // Basic query\n  params.set('q', q.trim());\n\n  // Optional filters\n  if (author) params.set('author', author.trim());\n  if (year) params.set('first_publish_year', year.trim());\n  if (language) params.set('language', language.toLowerCase());\n\n  // Pagination: OpenLibrary returns up to 100 results per page,\n  // so we use 'page' to move between chunks.\n  params.set('page', page);\n  params.set('limit', limit);\n  const url = `${BASE}/search.json?${params.toString()}`;\n  try {\n    const res = await fetch(url);\n    if (!res.ok) throw new Error(`API error: ${res.status}`);\n    const data = await res.json();\n\n    // ✅ Sometimes OpenLibrary returns fewer than expected — handle safely\n    if (!data.docs || !Array.isArray(data.docs)) {\n      return {\n        docs: [],\n        numFound: 0\n      };\n    }\n\n    // ✅ Defensive trim: ensure each book has at least a title\n    const cleanedDocs = data.docs.filter(b => b.title && b.title.trim());\n    return {\n      docs: cleanedDocs,\n      numFound: data.numFound || cleanedDocs.length\n    };\n  } catch (err) {\n    console.error('Error fetching data from OpenLibrary:', err);\n    throw new Error('Failed to fetch book data. Please try again.');\n  }\n}\n\n// ✅ Cover image helper\nexport function coverUrl(id, size = 'M') {\n  if (!id) return null;\n  return `https://covers.openlibrary.org/b/id/${id}-${size}.jpg`;\n}\n\n// ✅ Book page link helper\nexport function openLibraryUrl(key) {\n  if (!key) return BASE;\n  return `${BASE}${key}`;\n}","map":{"version":3,"names":["BASE","searchBooks","q","author","year","language","page","limit","trim","docs","numFound","params","URLSearchParams","set","toLowerCase","url","toString","res","fetch","ok","Error","status","data","json","Array","isArray","cleanedDocs","filter","b","title","length","err","console","error","coverUrl","id","size","openLibraryUrl","key"],"sources":["C:/Users/admin/Desktop/Book_Finder/book-finder-final/book-finder/src/api/openLibrary.js"],"sourcesContent":["const BASE = 'https://openlibrary.org';\n\nexport async function searchBooks({ q, author, year, language, page = 1, limit = 12 }) {\n  // Prevent empty search\n  if (!q || !q.trim()) return { docs: [], numFound: 0 };\n\n  const params = new URLSearchParams();\n\n  // Basic query\n  params.set('q', q.trim());\n\n  // Optional filters\n  if (author) params.set('author', author.trim());\n  if (year) params.set('first_publish_year', year.trim());\n  if (language) params.set('language', language.toLowerCase());\n\n  // Pagination: OpenLibrary returns up to 100 results per page,\n  // so we use 'page' to move between chunks.\n  params.set('page', page);\n  params.set('limit', limit);\n\n  const url = `${BASE}/search.json?${params.toString()}`;\n\n  try {\n    const res = await fetch(url);\n    if (!res.ok) throw new Error(`API error: ${res.status}`);\n    const data = await res.json();\n\n    // ✅ Sometimes OpenLibrary returns fewer than expected — handle safely\n    if (!data.docs || !Array.isArray(data.docs)) {\n      return { docs: [], numFound: 0 };\n    }\n\n    // ✅ Defensive trim: ensure each book has at least a title\n    const cleanedDocs = data.docs.filter((b) => b.title && b.title.trim());\n\n    return {\n      docs: cleanedDocs,\n      numFound: data.numFound || cleanedDocs.length,\n    };\n  } catch (err) {\n    console.error('Error fetching data from OpenLibrary:', err);\n    throw new Error('Failed to fetch book data. Please try again.');\n  }\n}\n\n// ✅ Cover image helper\nexport function coverUrl(id, size = 'M') {\n  if (!id) return null;\n  return `https://covers.openlibrary.org/b/id/${id}-${size}.jpg`;\n}\n\n// ✅ Book page link helper\nexport function openLibraryUrl(key) {\n  if (!key) return BASE;\n  return `${BASE}${key}`;\n}\n"],"mappings":"AAAA,MAAMA,IAAI,GAAG,yBAAyB;AAEtC,OAAO,eAAeC,WAAWA,CAAC;EAAEC,CAAC;EAAEC,MAAM;EAAEC,IAAI;EAAEC,QAAQ;EAAEC,IAAI,GAAG,CAAC;EAAEC,KAAK,GAAG;AAAG,CAAC,EAAE;EACrF;EACA,IAAI,CAACL,CAAC,IAAI,CAACA,CAAC,CAACM,IAAI,CAAC,CAAC,EAAE,OAAO;IAAEC,IAAI,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAE,CAAC;EAErD,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;;EAEpC;EACAD,MAAM,CAACE,GAAG,CAAC,GAAG,EAAEX,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;;EAEzB;EACA,IAAIL,MAAM,EAAEQ,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAEV,MAAM,CAACK,IAAI,CAAC,CAAC,CAAC;EAC/C,IAAIJ,IAAI,EAAEO,MAAM,CAACE,GAAG,CAAC,oBAAoB,EAAET,IAAI,CAACI,IAAI,CAAC,CAAC,CAAC;EACvD,IAAIH,QAAQ,EAAEM,MAAM,CAACE,GAAG,CAAC,UAAU,EAAER,QAAQ,CAACS,WAAW,CAAC,CAAC,CAAC;;EAE5D;EACA;EACAH,MAAM,CAACE,GAAG,CAAC,MAAM,EAAEP,IAAI,CAAC;EACxBK,MAAM,CAACE,GAAG,CAAC,OAAO,EAAEN,KAAK,CAAC;EAE1B,MAAMQ,GAAG,GAAG,GAAGf,IAAI,gBAAgBW,MAAM,CAACK,QAAQ,CAAC,CAAC,EAAE;EAEtD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;IAC5B,IAAI,CAACE,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAcH,GAAG,CAACI,MAAM,EAAE,CAAC;IACxD,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;;IAE7B;IACA,IAAI,CAACD,IAAI,CAACb,IAAI,IAAI,CAACe,KAAK,CAACC,OAAO,CAACH,IAAI,CAACb,IAAI,CAAC,EAAE;MAC3C,OAAO;QAAEA,IAAI,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAE,CAAC;IAClC;;IAEA;IACA,MAAMgB,WAAW,GAAGJ,IAAI,CAACb,IAAI,CAACkB,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,KAAK,IAAID,CAAC,CAACC,KAAK,CAACrB,IAAI,CAAC,CAAC,CAAC;IAEtE,OAAO;MACLC,IAAI,EAAEiB,WAAW;MACjBhB,QAAQ,EAAEY,IAAI,CAACZ,QAAQ,IAAIgB,WAAW,CAACI;IACzC,CAAC;EACH,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,uCAAuC,EAAEF,GAAG,CAAC;IAC3D,MAAM,IAAIX,KAAK,CAAC,8CAA8C,CAAC;EACjE;AACF;;AAEA;AACA,OAAO,SAASc,QAAQA,CAACC,EAAE,EAAEC,IAAI,GAAG,GAAG,EAAE;EACvC,IAAI,CAACD,EAAE,EAAE,OAAO,IAAI;EACpB,OAAO,uCAAuCA,EAAE,IAAIC,IAAI,MAAM;AAChE;;AAEA;AACA,OAAO,SAASC,cAAcA,CAACC,GAAG,EAAE;EAClC,IAAI,CAACA,GAAG,EAAE,OAAOtC,IAAI;EACrB,OAAO,GAAGA,IAAI,GAAGsC,GAAG,EAAE;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}